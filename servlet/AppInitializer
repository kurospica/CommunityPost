package servlet;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;

@WebListener
public class AppInitializer implements ServletContextListener {
    private static final String JDBC_URL = "jdbc:h2:./database/MutterDatabase";
    private static final String DB_USER = "sa";
    private static final String DB_PASS = "";

    @Override
    public void contextInitialized(ServletContextEvent servletContextEvent) {
        createTablesIfNeeded();
        resetTableData();
    }

    private void createTablesIfNeeded() {
        try {
            Class.forName("org.h2.Driver");
        } catch (ClassNotFoundException e) {
            throw new IllegalStateException("JDBCドライバを読み込めませんでした", e);
        }

        try {
            Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASS);
            Statement statement = connection.createStatement();

            // FILEPATHSテーブルの作成
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS FILEPATHS (" +
                    "image_id INT AUTO_INCREMENT PRIMARY KEY," +
                    "mutter_id INT," +
                    "content BLOB," +
                    "name VARCHAR(100)," +
                    "content_type VARCHAR(100)," +
                    "uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP" +
                    ")");
            // Reset AUTO_INCREMENT
            statement.executeUpdate("ALTER TABLE FILEPATHS ALTER COLUMN image_id RESTART WITH 1;");

            // MUTTERSテーブルの作成
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS MUTTERS (" +
                    "mutter_id INT AUTO_INCREMENT PRIMARY KEY," +
                    "name VARCHAR(255)," +
                    "text VARCHAR(440) NOT NULL," +
                    "tweet_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP" +
                    ")");
            // Reset AUTO_INCREMENT
            statement.executeUpdate("ALTER TABLE MUTTERS ALTER COLUMN mutter_id RESTART WITH 1;");

            // ACCOUNTSテーブルの作成
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS ACCOUNTS (" +
                    "LOGINID VARCHAR (10) PRIMARY KEY," +
                    "NAME VARCHAR (40) NOT NULL," +
                    "PASS VARCHAR (40) NOT NULL," +
                    "ROLEID INT NOT NULL" +
                    ")");
            // Reset AUTO_INCREMENT if needed

            // Repliesテーブルの作成
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS Replies (" +
                    "id INT AUTO_INCREMENT PRIMARY KEY," +
                    "reply_id INT," +
                    "reply_name VARCHAR(255)," +
                    "text VARCHAR(255)," +
                    "posted_at TIMESTAMP," +
                    "FOREIGN KEY (reply_id) REFERENCES Mutters(mutter_id)" +
                    ")");
            // Reset AUTO_INCREMENT
            statement.executeUpdate("ALTER TABLE Replies ALTER COLUMN id RESTART WITH 1;");

            // 接続とステートメントをクローズする
            statement.close();
            connection.close();

            System.out.println("テーブルが作成されました。");
        } catch (SQLException e) {
            System.out.println("テーブルの作成に失敗しました。");
            e.printStackTrace();
        }
    }

    private void resetTableData() {
        try {
            Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASS);
            Statement statement = connection.createStatement();

            // 外部キー制約の無効化
            statement.executeUpdate("SET REFERENTIAL_INTEGRITY FALSE");

            // テーブルのデータを削除
            statement.executeUpdate("DELETE FROM FILEPATHS");
            statement.executeUpdate("DELETE FROM MUTTERS");
            statement.executeUpdate("DELETE FROM ACCOUNTS");
            statement.executeUpdate("DELETE FROM Replies");

            // 外部キー制約の有効化
            statement.executeUpdate("SET REFERENTIAL_INTEGRITY TRUE");

            // 接続とステートメントをクローズする
            statement.close();
            connection.close();

            System.out.println("テーブル内のデータがリセットされました。");
        } catch (SQLException e) {
            System.out.println("データベースに接続できませんでした。");
            e.printStackTrace();
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent servletContextEvent) {
        // 何もしない
    }
}
